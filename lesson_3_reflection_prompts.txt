When would you want to use a remote repository rather than keeping all your work local?

Remote repositories are key to enable collaboration. If multiple people are working on a project, they need a centralized repo
to work with. Remote repos also enable the developer to share their work (without exposing files/features that aren't ready to be
seen by the public!)

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If multiple people are working on a project, you may not want to pull all changes to the remote down at a given moment. Similarly, automatic pushing could mean half-baked features are made public before they are ready for production. Manual push/pull empowers the developer to make changes to a group project locally without heavy coordination with team members

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks: make a (local) copy of a repo and set up a remote on Github
Clones: make a local copy of repo
Branch: Create multiple restore paths in a repos history; useful for testing
experimental features as well as creating multiple versions of a repo (e.g. A 
Spanish edition of your app)

What is the benefit of having a copy of the last known state of the remote stored locally?

Having a local copy lets you easily compare your local changes to the repo.
This also provides an easy way to see what changes have been introduced to
the repo since the your last pull.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without Git[hub], collaboration would require coordinating smaller changes to a master file. I would be walking on egg shells during the entire development process worried I were going to break the master files.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When a change is significant (has a high propensity to break the master
branch) it is wise to use a separate branch. If a change is minor, it may
make more sense to work directly in master to avoid the overhead of merging
the branches later. 
