What happens when you initialize a repository? Why do you need to do it?

git init
Creates a .git file in the directory (an empty repo).Commits still req'd to save anything!  

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area asks as an intermediary between your working directory and the repo.
git init
git add <specific files you want to add from your working directory).

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows you to chose which files are included in a commit. 
If you've made multiple complex changes to the working directory, 
you can commit changes separately.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful for testing experimental features without altering
the master codebase (not good for things like bug fixes, doc revamps,
or feature improvements).

How do the diagrams help you visualize the branch structure?
Diagrams allow you to easily see which commits are associated with a 
particular branch. It is important to work on the 'tip' of branches for 
reachability. Careful attention to structure makes merging branches easier
in the future. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Branches allow multiple featuers to be built out separately from the production
code. When branches are merged, file states are combined to represent changes
on both branches. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is obviously faster than manually merging, however, it comes at a cost to accuracy. When automating the combination of code multiple people
have written, you're bound to run into problems from time to time. Manual merge is much more accurate, but requires significantly more time and effort
from the end user. 

